큐(Queue)는 리스트의 한쪽 끝에서는 자료가 삽입되고 다른 한쪽 끝에서는 자료가 삭제되는 선형리스트이다.

일반적인 큐에서,
삽입이 발생하는 부분으 rear라 한다.
삭제가 발생하는 부분을 front(head)라는 포인터를 가리킨다.
초기치는 배열은 0번요소부터 시작하므로, 이를 참고해
front와 rear의 초기치는 "-1"이다.

큐의 연산에는 특별한 연산자는 없고, 자료를 큐에 삽입하고 삭제가능하다.

<원리>
자료를 큐에 삽입하기 위해서는 rear포인터가 가리키는 위치보다 1증가한 위치(rear+1)에 자료를 삽입한다.
반대로, 큐에서 자료를 삭제하기 위해서는 front포인터가 가리키는 위치보다 1증가한 위치(front+1)에 있는 자료를 삭제한다.

주로, 운영체제의 스케쥴링(Scheduling)에 주로 사용하는 방식이다.

<종류>
1. 원형 큐
큐(queue)를 원형으로 표현한 큐를 말한다.
이때, 원형큐의 끝은 시작점 rear포인터와 동일하다.(뫼비우스의 띠 생각하면 된다)
*** front == rear이다.
진행시 rear의 초기치는 0이다.

2. 데크(Dequeue)
큐와 같지만, 오른쪽, 왼쪽 양끝에서 삽입, 삭제가 모두일어나는 큐를 말한다.
그래서 포인터가 2개 필요하다.

==================================
=   0  =   1   =   2  =  3  =  4 =
==================================
 a포인터                     b포인터
 
 a, b포인터 모두 삽입과 삭제가 일어날 위치를 가리킨다.
 
 * 입력을 한쪽 끝에서만가능하게 한(데크로 스크롤), 
 출력을 한쪽 끝에서만 가능하게한 (데크로 쉘프)가 있다.
 
 3. 다중스택
 오버플로우 문제를 해결하기 위해 
 1차원 배열에 여러개의 스택을 구현해 오버플로 문제를 해결한 방식.
 
 크기가 n인 다중스택을 구현하는 경우, 다중 스택의 갯수가 m일때, 하나의 스택은 n/m이 된다.
 bottom[i] = top[i] = n/m*(i-1)(단, 1 <= i <= m)
 
 i번째, 스택에 삽입이 발생시, top[i]++하여, top포인터를 1증가후 삽입이 일어나고,
 삭제가 발생시, top[i]--하여 top포인터를 1 감소후 삭제가 이루워진다.
 
 
 
